name: CMake

on:
  push:
    branches: [ "main" ]
    tags: "v*"
  pull_request:
    branches: [ "main" ]
    tags: "v*"
  workflow_dispatch:
    branches: [ "main" ]
    tags: "v*"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CPM_SOURCE_CACHE: ${{github.workspace}}/cache/cpm
  QT_QPA_PLATFORM: offscreen

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: lukka/get-cmake@latest

    - name: Cache CPM Dependencies and build dir
      uses: actions/cache@v3
      with:
        path: |
          ${{env.CPM_SOURCE_CACHE}}
          ${{github.workspace}}/build
        key: ${{ runner.os }}-crystalexplorer-cache
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.0.0
      with:
        version: 6.6.2
        cache: true


    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        CALL "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath > "vs_path.txt"
        SET /p VSPATH=<vs_path.txt
        CALL "%VSPATH%\VC\Auxiliary\Build\vcvars64.bat"
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja

      # should be no op on windows
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure

    - name: Package with CPack
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        cpack | tee cpack_output.txt
        PACKAGE_FILE=$(grep -oE 'CPack: - package: .+ generated\.' cpack_output.txt | sed 's/CPack: - package: \(.*\) generated\./\1/')
        echo "PACKAGE_NAME=${PACKAGE_FILE}" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ github.sha }}
        path: ${{env.PACKAGE_NAME}}

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: binaries
        name: binaries-${{ github.sha }}

    - name: Make GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          binaries-${{ github.sha }}/*
