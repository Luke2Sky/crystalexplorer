#pragma once
#include <QString>
#include <QTextStream>

#include "atomid.h"
#include "energytype.h"
#include "qeigen.h"
#include "surfacedescription.h"
#include "transformablewavefunction.h"

// Wavefunction Data
// (i) Wavefunction Source (the program e.g. gaussian)
// (ii) Method (e.g. Hartree-Fock)
// (iii) Basis-set (e.g. STO-3G)
// (iv) Exchange Potentials e.g. Becke88
// (v) Correlation Potentials e.g. LYP
//
// enum: all values available
// labels: how it appears in dialog boxes
// include: whether it is offered as a selection to the user
//          (also controls the order they appear in a combobox for example)
enum class ExternalProgram {
  None,
  Tonto,
  Gaussian,
  NWChem,
  Psi4,
  Occ,
  Orca,
  XTB
};

inline const char *externalProgramLabel(ExternalProgram p) {
  switch (p) {
  case ExternalProgram::None:
    return "";
  case ExternalProgram::Tonto:
    return "Tonto";
  case ExternalProgram::Gaussian:
    return "Gaussian";
  case ExternalProgram::NWChem:
    return "NWChem";
  case ExternalProgram::Psi4:
    return "Psi4";
  case ExternalProgram::Occ:
    return "OpenCompChem";
  case ExternalProgram::Orca:
    return "ORCA";
  case ExternalProgram::XTB:
    return "XTB";
  }
  return "Unknown external program";
}

const QStringList ExternalProgramLabels = {"",       "Tonto", "Gaussian",
                                           "NWChem", "Psi4",  "occ"};
const QVector<ExternalProgram> availableExternalPrograms{
    ExternalProgram::Gaussian, ExternalProgram::Tonto, ExternalProgram::NWChem,
    ExternalProgram::Psi4, ExternalProgram::Occ};

enum class Method {
  hartreeFock,
  mp2,
  b3lyp,
  kohnSham,
  GFN0xTB,
  GFN1xTB,
  GFN2xTB,
  GFNFF,
  DLPNO
};
const QStringList methodLabels{"HF",       "MP2",      "B3LYP",
                               "DFT",      "GFN0-xTB", "GFN1-xTB",
                               "GFN2-xTB", "GFN-FF",   "DLPNO-CCSD(T)"};
const QVector<Method> includeMethod = {Method::hartreeFock, Method::mp2,
                                       Method::b3lyp, Method::kohnSham};

// We don't include cc_pvqz in includeBasisset because Tonto is unable to read
// these wavefunctions
// generated by Gaussian (Tonto error msg: swap_g94_orbital_order cannot yet
// convert order for g shells)
enum class BasisSet {
  STO_3G,
  Pople3_21G,
  Pople6_31Gd,
  Pople6_31Gdp,
  Pople6_311Gdp,
  D95V,
  DGDZVP,
  CC_PVDZ,
  CC_PVTZ,
  CC_PVQZ,
  TightBinding
};

inline const char *basisSetLabel(BasisSet b) {
  switch (b) {
  case BasisSet::STO_3G:
    return "STO-3G";
  case BasisSet::Pople3_21G:
    return "3-21G";
  case BasisSet::Pople6_31Gd:
    return "6-31G(d)";
  case BasisSet::Pople6_31Gdp:
    return "6-31G(d,p)";
  case BasisSet::Pople6_311Gdp:
    return "6-311G(d,p)";
  case BasisSet::D95V:
    return "D95V";
  case BasisSet::DGDZVP:
    return "DGDZVP";
  case BasisSet::CC_PVDZ:
    return "cc-pVDZ";
  case BasisSet::CC_PVTZ:
    return "cc-pVTZ";
  case BasisSet::CC_PVQZ:
    return "cc-pVQZ";
  case BasisSet::TightBinding:
    return "TightBinding";
  }
  return "unknown";
}

const QVector<BasisSet> includeBasisset{
    BasisSet::STO_3G,       BasisSet::Pople3_21G,    BasisSet::Pople6_31Gd,
    BasisSet::Pople6_31Gdp, BasisSet::Pople6_311Gdp, BasisSet::D95V,
    BasisSet::DGDZVP,       BasisSet::CC_PVDZ,       BasisSet::CC_PVTZ};

enum class ExchangePotential { slater, x_alpha, becke88, b3lyp_x };

const QStringList exchangePotentialLabels{"Slater", "X-Alpha", "Becke88",
                                          "B3LYP"};

const QVector<ExchangePotential> includeExchangePotential{
    ExchangePotential::becke88, ExchangePotential::slater,
    ExchangePotential::x_alpha, ExchangePotential::b3lyp_x};

enum class CorrelationPotential { vwn, lyp, b3lyp_c };
const QStringList correlationPotentialLabels{"VWN", "LYP", "B3LYP"};

const QVector<CorrelationPotential> includeCorrelationPotential{
    CorrelationPotential::vwn, CorrelationPotential::lyp,
    CorrelationPotential::b3lyp_c};

// Job Data
enum class JobType {
  cifProcessing,
  surfaceGeneration,
  wavefunction,
  pairEnergy,
  monomerEnergy
};

constexpr inline const char *jobProcessDescription(JobType t) {
  switch (t) {
  case JobType::cifProcessing:
    return "Reading CIF in progress...";
  case JobType::surfaceGeneration:
    return "Surface generation in progress...";
  case JobType::wavefunction:
    return "Wavefunction calculation in progress...";
  case JobType::pairEnergy:
    return "Pair energy calculation in progress...";
  case JobType::monomerEnergy:
    return "Monomer energy calculation in progress...";
  }
  return "unknown job description";
}

constexpr inline const char *jobErrorMessage(JobType t) {
  switch (t) {
  case JobType::cifProcessing:
    return "Error processing CIF";
  case JobType::surfaceGeneration:
    return "Error generating suface";
  case JobType::wavefunction:
    return "Error calculating wavefunction";
  case JobType::pairEnergy:
    return "Error calculating pair energy";
  case JobType::monomerEnergy:
    return "Error calculating monomer energy";
  }
  return "unknown job error";
}

class JobParameters {
  friend QDataStream &operator<<(QDataStream &, const JobParameters &jobParams);
  friend QDataStream &operator>>(QDataStream &, JobParameters &jobParams);

public:
  JobParameters();
  static ExternalProgram prefferedWavefunctionSource();
  bool equivalentTo(const JobParameters &params) const;
  bool hasSameWavefunctionParameters(const JobParameters &rhs) const;

  bool isXtbJob() const;
  inline QString programName() const { return externalProgramLabel(program); }
  inline QString basisSetName() const { return basisSetLabel(basisset); }
  inline QString methodName() const { return basisSetLabel(basisset); }

  // General parameters
  JobType jobType{JobType::cifProcessing};

  // Surface parameters
  IsosurfaceDetails::Type surfaceType;
  IsosurfacePropertyDetails::Type requestedPropertyType;
  float isovalue;
  ResolutionDetails::Level resolution;
  float voidClusterPadding{0};

  // Molecular orbital parameters
  OrbitalType molecularOrbitalType;
  int molecularOrbitalLevel;

  // Basisset parameters
  QString slaterBasisName;

  // Filenames and Directories
  QString inputFilename;
  QString outputFilename;

  // General wavefunction parameters
  ExternalProgram program{ExternalProgram::None};
  ExchangePotential exchangePotential;
  CorrelationPotential correlationPotential;
  Method theory;
  BasisSet basisset;
  int charge{0};
  int multiplicity{1};
  QString QMInputFilename;
  QVector<WavefunctionTransform> wavefunctionTransforms;
  QMap<EnergyType, double> monomerEnergySum;

  // Miscellaneous Options
  bool overrideBondLengths{false};
  bool editInputFile{false};
  bool onlyReadRequestedProperty{false};

  // Atoms for calculation
  QVector<AtomId> atoms;
  QVector<int> atomGroups;

  // Atoms to suppress
  QVector<int> atomsToSuppress;

  // Information for a series of calculations
  int step{0};
  int maxStep{0};
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stream Functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QDataStream &operator<<(QDataStream &, const JobParameters &);
QDataStream &operator>>(QDataStream &, JobParameters &);
