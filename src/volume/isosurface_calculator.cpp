#include "isosurface_calculator.h"
#include "occsurfacetask.h"
#include "load_mesh.h"
#include <occ/core/element.h>
#include <QFile>
#include <QTextStream>

void write_xyz_file(const QString &filename, const occ::IVec &nums, const occ::Mat3N &positions) {
    if (nums.rows() != positions.cols()) {
	qDebug() << "Invalid write xyz call, mismatch in nums and positions size";
        return;
    }

    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
	qDebug() << "Could not open file for writing in write_xyz_file";
        return;
    }

    QTextStream out(&file);
    
    out << nums.size() << "\n";
    out << "XYZ file generated by IsosurfaceCalculator" << "\n";

    for (int i = 0; i < nums.size(); ++i) {
        auto sym = QString::fromStdString(occ::core::Element(nums(i)).symbol());
        const auto pos = positions.col(i);
        out << sym << " " << pos(0) << " " << pos(1) << " " << pos(2) << "\n";
    }

    file.close();
    qDebug() << "Wrote xyz file to" << QFileInfo(file).absolutePath() << filename;
}

namespace volume {

IsosurfaceCalculator::IsosurfaceCalculator(QObject * parent) : QObject(parent) {}

void IsosurfaceCalculator::setTaskManager(TaskManager *mgr) {
    m_taskManager = mgr;
}

void IsosurfaceCalculator::start(isosurface::Parameters params) {
  if(!params.structure) {
    qDebug() << "Found nullptr for chemical structure in IsosurfaceCalculator";
    return;
  }
  m_structure = params.structure;

  QString filename, filename_outside;

  if(params.kind == isosurface::Kind::Void) {
      filename = "crystal.cif";
  }
  else {
      std::vector<int> idx = params.structure->atomIndicesWithFlags(AtomFlag::Selected);
      occ::IVec nums = params.structure->atomicNumbers()(idx);
      occ::Mat3N pos = params.structure->atomicPositions()(Eigen::all, idx);



      filename = "ce_surface_inside.xyz";
      filename_outside = "ce_surface_outside.xyz";

      write_xyz_file(filename, nums, pos);
      {
	  auto idxs = params.structure->atomsSurroundingAtomsWithFlags(AtomFlag::Selected, 12.0);
	  qDebug() << "Idxs size: " << idxs.size();
	  auto nums_outside = params.structure->atomicNumbersForIndices(idxs);
	  auto pos_outside = params.structure->atomicPositionsForIndices(idxs);
	  write_xyz_file(filename_outside, nums_outside, pos_outside);

      }
  }

  OccSurfaceTask * surface_task = new OccSurfaceTask();
  surface_task->setSurfaceParameters(params);
  surface_task->setProperty("name", "Water promolecule");
  surface_task->setProperty("inputFile", filename);
  surface_task->setProperty("environmentFile", filename_outside);
  qDebug() << "Generating " << isosurface::kindToString(params.kind) << "surface with isovalue: " << params.isovalue;
  surface_task->setProperty("isovalue", params.isovalue);

  auto taskId = m_taskManager->add(surface_task);
  connect(surface_task, &Task::completed, this, &IsosurfaceCalculator::onTaskComplete);

}

void IsosurfaceCalculator::onTaskComplete() {
    qDebug() << "Task finished in IsosurfaceCalculator";
    Mesh * mesh = io::loadMesh("surface.ply");
    mesh->setObjectName("Mesh");
    mesh->setParent(m_structure);
}

}
